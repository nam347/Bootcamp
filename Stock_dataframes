{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP5XheEfwvF3bukKBcHFp90",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/nam347/Bootcamp/blob/main/Stock_dataframes\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "pipvuULooxcu"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import yfinance as yf\n",
        "import numpy as np\n",
        "import datetime"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "amzn=yf.download(\"AMZN\",start='2022-02-21',end='2022-08-21')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kKmZPmHAp3LU",
        "outputId": "4276e66b-bf02-4a81-d18a-4d85db4ef827"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\r[*********************100%%**********************]  1 of 1 completed\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "aapl=yf.download(\"AAPL\",start='2022-02-21',end='2022-08-21')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W2M2E1RVqPUf",
        "outputId": "84f8b282-c91f-4866-a01a-daba1de98a1c"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\r[*********************100%%**********************]  1 of 1 completed\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "amzn.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "OWBgj82jsC-I",
        "outputId": "e438c99e-9c81-4a4f-d0de-b64db0a73c58"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  Open        High         Low       Close   Adj Close  \\\n",
              "Date                                                                     \n",
              "2022-02-22  150.478500  152.982498  148.485504  150.197495  150.197495   \n",
              "2022-02-23  151.650497  151.763000  144.651001  144.826996  144.826996   \n",
              "2022-02-24  139.837494  151.748993  139.500000  151.358002  151.358002   \n",
              "2022-02-25  150.550003  153.990005  149.213501  153.788498  153.788498   \n",
              "2022-02-28  152.425003  154.449997  150.850006  153.563004  153.563004   \n",
              "\n",
              "               Volume  \n",
              "Date                   \n",
              "2022-02-22   66128000  \n",
              "2022-02-23   64244000  \n",
              "2022-02-24  100786000  \n",
              "2022-02-25   62396000  \n",
              "2022-02-28   57684000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-84230720-ac4b-42ab-a3d1-c03a40931546\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2022-02-22</th>\n",
              "      <td>150.478500</td>\n",
              "      <td>152.982498</td>\n",
              "      <td>148.485504</td>\n",
              "      <td>150.197495</td>\n",
              "      <td>150.197495</td>\n",
              "      <td>66128000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-02-23</th>\n",
              "      <td>151.650497</td>\n",
              "      <td>151.763000</td>\n",
              "      <td>144.651001</td>\n",
              "      <td>144.826996</td>\n",
              "      <td>144.826996</td>\n",
              "      <td>64244000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-02-24</th>\n",
              "      <td>139.837494</td>\n",
              "      <td>151.748993</td>\n",
              "      <td>139.500000</td>\n",
              "      <td>151.358002</td>\n",
              "      <td>151.358002</td>\n",
              "      <td>100786000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-02-25</th>\n",
              "      <td>150.550003</td>\n",
              "      <td>153.990005</td>\n",
              "      <td>149.213501</td>\n",
              "      <td>153.788498</td>\n",
              "      <td>153.788498</td>\n",
              "      <td>62396000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-02-28</th>\n",
              "      <td>152.425003</td>\n",
              "      <td>154.449997</td>\n",
              "      <td>150.850006</td>\n",
              "      <td>153.563004</td>\n",
              "      <td>153.563004</td>\n",
              "      <td>57684000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-84230720-ac4b-42ab-a3d1-c03a40931546')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-84230720-ac4b-42ab-a3d1-c03a40931546 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-84230720-ac4b-42ab-a3d1-c03a40931546');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b8b64182-6138-42fe-a6aa-1283ee6ef2e3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b8b64182-6138-42fe-a6aa-1283ee6ef2e3')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b8b64182-6138-42fe-a6aa-1283ee6ef2e3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "aapl.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "I-q7EXzhsUMh",
        "outputId": "63d273ef-5e8a-49a7-d032-0bc0fe4fcd83"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  Open        High         Low       Close   Adj Close  \\\n",
              "Date                                                                     \n",
              "2022-02-22  164.979996  166.690002  162.149994  164.320007  162.885040   \n",
              "2022-02-23  165.539993  166.149994  159.750000  160.070007  158.672150   \n",
              "2022-02-24  152.580002  162.850006  152.000000  162.740005  161.318848   \n",
              "2022-02-25  163.839996  165.119995  160.869995  164.850006  163.410416   \n",
              "2022-02-28  163.059998  165.419998  162.429993  165.119995  163.678040   \n",
              "\n",
              "               Volume  \n",
              "Date                   \n",
              "2022-02-22   91162800  \n",
              "2022-02-23   90009200  \n",
              "2022-02-24  141147500  \n",
              "2022-02-25   91974200  \n",
              "2022-02-28   95056600  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b0a910aa-e5bf-49a9-a6ac-935dc43cb95f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2022-02-22</th>\n",
              "      <td>164.979996</td>\n",
              "      <td>166.690002</td>\n",
              "      <td>162.149994</td>\n",
              "      <td>164.320007</td>\n",
              "      <td>162.885040</td>\n",
              "      <td>91162800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-02-23</th>\n",
              "      <td>165.539993</td>\n",
              "      <td>166.149994</td>\n",
              "      <td>159.750000</td>\n",
              "      <td>160.070007</td>\n",
              "      <td>158.672150</td>\n",
              "      <td>90009200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-02-24</th>\n",
              "      <td>152.580002</td>\n",
              "      <td>162.850006</td>\n",
              "      <td>152.000000</td>\n",
              "      <td>162.740005</td>\n",
              "      <td>161.318848</td>\n",
              "      <td>141147500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-02-25</th>\n",
              "      <td>163.839996</td>\n",
              "      <td>165.119995</td>\n",
              "      <td>160.869995</td>\n",
              "      <td>164.850006</td>\n",
              "      <td>163.410416</td>\n",
              "      <td>91974200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-02-28</th>\n",
              "      <td>163.059998</td>\n",
              "      <td>165.419998</td>\n",
              "      <td>162.429993</td>\n",
              "      <td>165.119995</td>\n",
              "      <td>163.678040</td>\n",
              "      <td>95056600</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b0a910aa-e5bf-49a9-a6ac-935dc43cb95f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b0a910aa-e5bf-49a9-a6ac-935dc43cb95f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b0a910aa-e5bf-49a9-a6ac-935dc43cb95f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6bad1d31-0be6-4d81-ae9b-53c1d21ca797\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6bad1d31-0be6-4d81-ae9b-53c1d21ca797')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6bad1d31-0be6-4d81-ae9b-53c1d21ca797 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "short_window = 10  # Short moving average period\n",
        "long_window = 30   # Long moving average period\n",
        "\n",
        "# Create the moving averages\n",
        "amzn['Short_MA'] = amzn['Close'].rolling(window=short_window).mean()\n",
        "amzn['Long_MA'] = amzn['Close'].rolling(window=long_window).mean()"
      ],
      "metadata": {
        "id": "Uh-qOrn2x94S"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "amzn.head(15)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 551
        },
        "id": "BAAxm9P5yiDK",
        "outputId": "dbd044c6-2c2c-48fe-fa9d-3be2807543fb"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  Open        High         Low       Close   Adj Close  \\\n",
              "Date                                                                     \n",
              "2022-02-22  150.478500  152.982498  148.485504  150.197495  150.197495   \n",
              "2022-02-23  151.650497  151.763000  144.651001  144.826996  144.826996   \n",
              "2022-02-24  139.837494  151.748993  139.500000  151.358002  151.358002   \n",
              "2022-02-25  150.550003  153.990005  149.213501  153.788498  153.788498   \n",
              "2022-02-28  152.425003  154.449997  150.850006  153.563004  153.563004   \n",
              "2022-03-01  152.732498  154.098999  149.977005  151.141998  151.141998   \n",
              "2022-03-02  150.848999  152.999496  148.750000  152.052505  152.052505   \n",
              "2022-03-03  153.531494  153.929001  146.856003  147.898499  147.898499   \n",
              "2022-03-04  147.158997  147.850006  143.807007  145.641006  145.641006   \n",
              "2022-03-07  145.443497  146.094498  137.416504  137.453003  137.453003   \n",
              "2022-03-08  136.683502  140.699493  133.572495  136.014496  136.014496   \n",
              "2022-03-09  139.500000  140.250000  136.828003  139.279007  139.279007   \n",
              "2022-03-10  145.684998  148.674500  143.977997  146.817505  146.817505   \n",
              "2022-03-11  149.574493  149.675003  145.369003  145.524506  145.524506   \n",
              "2022-03-14  145.981003  147.449997  140.884003  141.852997  141.852997   \n",
              "\n",
              "               Volume    Short_MA  Long_MA  \n",
              "Date                                        \n",
              "2022-02-22   66128000         NaN      NaN  \n",
              "2022-02-23   64244000         NaN      NaN  \n",
              "2022-02-24  100786000         NaN      NaN  \n",
              "2022-02-25   62396000         NaN      NaN  \n",
              "2022-02-28   57684000         NaN      NaN  \n",
              "2022-03-01   44874000         NaN      NaN  \n",
              "2022-03-02   47334000         NaN      NaN  \n",
              "2022-03-03   65198000         NaN      NaN  \n",
              "2022-03-04   60934000         NaN      NaN  \n",
              "2022-03-07   86934000  148.792101      NaN  \n",
              "2022-03-08   91662000  147.373801      NaN  \n",
              "2022-03-09   82656000  146.819002      NaN  \n",
              "2022-03-10  135062000  146.364952      NaN  \n",
              "2022-03-11   68900000  145.538553      NaN  \n",
              "2022-03-14   74086000  144.367552      NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4ee2d4df-a031-4ff9-a621-06f321463e6c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>Short_MA</th>\n",
              "      <th>Long_MA</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2022-02-22</th>\n",
              "      <td>150.478500</td>\n",
              "      <td>152.982498</td>\n",
              "      <td>148.485504</td>\n",
              "      <td>150.197495</td>\n",
              "      <td>150.197495</td>\n",
              "      <td>66128000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-02-23</th>\n",
              "      <td>151.650497</td>\n",
              "      <td>151.763000</td>\n",
              "      <td>144.651001</td>\n",
              "      <td>144.826996</td>\n",
              "      <td>144.826996</td>\n",
              "      <td>64244000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-02-24</th>\n",
              "      <td>139.837494</td>\n",
              "      <td>151.748993</td>\n",
              "      <td>139.500000</td>\n",
              "      <td>151.358002</td>\n",
              "      <td>151.358002</td>\n",
              "      <td>100786000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-02-25</th>\n",
              "      <td>150.550003</td>\n",
              "      <td>153.990005</td>\n",
              "      <td>149.213501</td>\n",
              "      <td>153.788498</td>\n",
              "      <td>153.788498</td>\n",
              "      <td>62396000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-02-28</th>\n",
              "      <td>152.425003</td>\n",
              "      <td>154.449997</td>\n",
              "      <td>150.850006</td>\n",
              "      <td>153.563004</td>\n",
              "      <td>153.563004</td>\n",
              "      <td>57684000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-03-01</th>\n",
              "      <td>152.732498</td>\n",
              "      <td>154.098999</td>\n",
              "      <td>149.977005</td>\n",
              "      <td>151.141998</td>\n",
              "      <td>151.141998</td>\n",
              "      <td>44874000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-03-02</th>\n",
              "      <td>150.848999</td>\n",
              "      <td>152.999496</td>\n",
              "      <td>148.750000</td>\n",
              "      <td>152.052505</td>\n",
              "      <td>152.052505</td>\n",
              "      <td>47334000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-03-03</th>\n",
              "      <td>153.531494</td>\n",
              "      <td>153.929001</td>\n",
              "      <td>146.856003</td>\n",
              "      <td>147.898499</td>\n",
              "      <td>147.898499</td>\n",
              "      <td>65198000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-03-04</th>\n",
              "      <td>147.158997</td>\n",
              "      <td>147.850006</td>\n",
              "      <td>143.807007</td>\n",
              "      <td>145.641006</td>\n",
              "      <td>145.641006</td>\n",
              "      <td>60934000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-03-07</th>\n",
              "      <td>145.443497</td>\n",
              "      <td>146.094498</td>\n",
              "      <td>137.416504</td>\n",
              "      <td>137.453003</td>\n",
              "      <td>137.453003</td>\n",
              "      <td>86934000</td>\n",
              "      <td>148.792101</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-03-08</th>\n",
              "      <td>136.683502</td>\n",
              "      <td>140.699493</td>\n",
              "      <td>133.572495</td>\n",
              "      <td>136.014496</td>\n",
              "      <td>136.014496</td>\n",
              "      <td>91662000</td>\n",
              "      <td>147.373801</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-03-09</th>\n",
              "      <td>139.500000</td>\n",
              "      <td>140.250000</td>\n",
              "      <td>136.828003</td>\n",
              "      <td>139.279007</td>\n",
              "      <td>139.279007</td>\n",
              "      <td>82656000</td>\n",
              "      <td>146.819002</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-03-10</th>\n",
              "      <td>145.684998</td>\n",
              "      <td>148.674500</td>\n",
              "      <td>143.977997</td>\n",
              "      <td>146.817505</td>\n",
              "      <td>146.817505</td>\n",
              "      <td>135062000</td>\n",
              "      <td>146.364952</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-03-11</th>\n",
              "      <td>149.574493</td>\n",
              "      <td>149.675003</td>\n",
              "      <td>145.369003</td>\n",
              "      <td>145.524506</td>\n",
              "      <td>145.524506</td>\n",
              "      <td>68900000</td>\n",
              "      <td>145.538553</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-03-14</th>\n",
              "      <td>145.981003</td>\n",
              "      <td>147.449997</td>\n",
              "      <td>140.884003</td>\n",
              "      <td>141.852997</td>\n",
              "      <td>141.852997</td>\n",
              "      <td>74086000</td>\n",
              "      <td>144.367552</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4ee2d4df-a031-4ff9-a621-06f321463e6c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4ee2d4df-a031-4ff9-a621-06f321463e6c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4ee2d4df-a031-4ff9-a621-06f321463e6c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6248ec1e-fe4d-48a4-9592-2c9e2f8c2fbf\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6248ec1e-fe4d-48a4-9592-2c9e2f8c2fbf')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6248ec1e-fe4d-48a4-9592-2c9e2f8c2fbf button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "amzn.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ODVznqGH5PF2",
        "outputId": "5febc690-de69-4f41-b8ec-ed26c4ce13b1"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(125, 8)"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "amt=10000\n",
        "cost=0\n",
        "sell=0\n",
        "shares=0\n",
        "data=pd.DataFrame()\n",
        "duration=np.zeros(shape=(100,1))\n",
        "hold=0\n",
        "check=1\n",
        "trades=0\n",
        "share_count=np.zeros(shape=(100,1))\n",
        "returns=np.zeros(shape=(100,1))\n",
        "p_amount=np.zeros(shape=(100,1))\n",
        "percent_returns=np.zeros(shape=(100,1))\n",
        "risk_free=0.05\n",
        "for i in range (long_window+1,125):\n",
        "  if (amzn.iloc[i-1,6]>amzn.iloc[i-1,7]) and (amzn.iloc[i,6]<amzn.iloc[i,7]) and check==1:\n",
        "    #print(amt)\n",
        "    check=0\n",
        "    shares=float(amt/amzn.iloc[i,3])\n",
        "    start=i\n",
        "    cost=amt\n",
        "    p_amount[trades]=amt\n",
        "    amt=0\n",
        "    #print(shares)\n",
        "  if (amzn.iloc[i-1,6]<amzn.iloc[i-1,7]) and (amzn.iloc[i,6]>amzn.iloc[i,7]) and check==0:\n",
        "    check=1\n",
        "    share_count[trades]=shares\n",
        "    end=i\n",
        "    hold=end-start\n",
        "    duration[trades]=hold\n",
        "    amt=amzn.iloc[i,3]*shares\n",
        "    sell=amt\n",
        "    returns[trades]=sell-cost\n",
        "    percent_returns[trades]=(sell-cost)/cost\n",
        "    trades+=1\n",
        "    shares=0\n",
        "    #print(amt)\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "CX8xZ3g3ynle"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(trades):\n",
        "    # Create a dictionary with values for each column\n",
        "    trade_data = {\n",
        "        'stock': 'Amazon',  # Assign 'Amazon' to the 'stock' column\n",
        "        'Quantity': share_count[i],  # Assign the corresponding value from 'share_count'\n",
        "        'Holding Period': duration[i],  # Assign the corresponding value from 'duration'\n",
        "        'Principal': p_amount[i],  # Assign the corresponding value from 'p_amount'\n",
        "        'Returns': returns[i],  # Assign the corresponding value from 'returns'\n",
        "        'Percentage returns':percent_returns[i]\n",
        "    }\n",
        "    data = data.append(trade_data, ignore_index=True)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vesOzbN7CZ8u",
        "outputId": "8c267f25-a131-472b-d00a-2d09e69a3d99"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-15-f4ed9dcb19af>:11: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  data = data.append(trade_data, ignore_index=True)\n",
            "<ipython-input-15-f4ed9dcb19af>:11: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  data = data.append(trade_data, ignore_index=True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WDK_tDkmCi5N",
        "outputId": "8e72431c-0ae1-4a78-aceb-d4cb9c176a86"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    stock             Quantity Holding Period            Principal  \\\n",
            "0  Amazon  [63.24490890353327]         [35.0]            [10000.0]   \n",
            "1  Amazon  [72.15230645974798]         [18.0]  [7664.018080230976]   \n",
            "\n",
            "                Returns     Percentage returns  \n",
            "0  [-2335.981919769024]  [-0.2335981919769024]  \n",
            "1   [528.8765384647713]  [0.06900773627204598]  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "final_return=(amt-10000)/amt\n",
        "print(final_return)\n",
        "sharpe_ratio=(final_return-risk_free)/(data['Percentage returns'].std())\n",
        "print(sharpe_ratio)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "licR7EC6qq1u",
        "outputId": "57ad4977-4baa-494a-d70a-1b8d8cefd977"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-0.220569830982634\n",
            "-1.2644944755670589\n"
          ]
        }
      ]
    }
  ]
}